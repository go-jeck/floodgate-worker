// Code generated by MockGen. DO NOT EDIT.
// Source: analytic/analytic_worker_services.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	sarama "github.com/Shopify/sarama"
	sarama_cluster "github.com/bsm/sarama-cluster"
	gomock "github.com/golang/mock/gomock"
)

// MockAnalyserServices is a mock of AnalyserServices interface
type MockAnalyserServices struct {
	ctrl     *gomock.Controller
	recorder *MockAnalyserServicesMockRecorder
}

// MockAnalyserServicesMockRecorder is the mock recorder for MockAnalyserServices
type MockAnalyserServicesMockRecorder struct {
	mock *MockAnalyserServices
}

// NewMockAnalyserServices creates a new mock instance
func NewMockAnalyserServices(ctrl *gomock.Controller) *MockAnalyserServices {
	mock := &MockAnalyserServices{ctrl: ctrl}
	mock.recorder = &MockAnalyserServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAnalyserServices) EXPECT() *MockAnalyserServicesMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockAnalyserServices) Start() error {
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockAnalyserServicesMockRecorder) Start() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockAnalyserServices)(nil).Start))
}

// Close mocks base method
func (m *MockAnalyserServices) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockAnalyserServicesMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAnalyserServices)(nil).Close))
}

// SetUpConfig mocks base method
func (m *MockAnalyserServices) SetUpConfig() sarama_cluster.Config {
	ret := m.ctrl.Call(m, "SetUpConfig")
	ret0, _ := ret[0].(sarama_cluster.Config)
	return ret0
}

// SetUpConfig indicates an expected call of SetUpConfig
func (mr *MockAnalyserServicesMockRecorder) SetUpConfig() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpConfig", reflect.TypeOf((*MockAnalyserServices)(nil).SetUpConfig))
}

// SetUpClient mocks base method
func (m *MockAnalyserServices) SetUpClient(config *sarama.Config) (sarama.Client, error) {
	ret := m.ctrl.Call(m, "SetUpClient", config)
	ret0, _ := ret[0].(sarama.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUpClient indicates an expected call of SetUpClient
func (mr *MockAnalyserServicesMockRecorder) SetUpClient(config interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpClient", reflect.TypeOf((*MockAnalyserServices)(nil).SetUpClient), config)
}

// NewClusterConsumer mocks base method
func (m *MockAnalyserServices) NewClusterConsumer(groupID, topic string) (*sarama_cluster.Consumer, error) {
	ret := m.ctrl.Call(m, "NewClusterConsumer", groupID, topic)
	ret0, _ := ret[0].(*sarama_cluster.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewClusterConsumer indicates an expected call of NewClusterConsumer
func (mr *MockAnalyserServicesMockRecorder) NewClusterConsumer(groupID, topic interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClusterConsumer", reflect.TypeOf((*MockAnalyserServices)(nil).NewClusterConsumer), groupID, topic)
}
