// Code generated by MockGen. DO NOT EDIT.
// Source: influxdb-handler/influx_handler.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockInfluxDB is a mock of InfluxDB interface
type MockInfluxDB struct {
	ctrl     *gomock.Controller
	recorder *MockInfluxDBMockRecorder
}

// MockInfluxDBMockRecorder is the mock recorder for MockInfluxDB
type MockInfluxDBMockRecorder struct {
	mock *MockInfluxDB
}

// NewMockInfluxDB creates a new mock instance
func NewMockInfluxDB(ctrl *gomock.Controller) *MockInfluxDB {
	mock := &MockInfluxDB{ctrl: ctrl}
	mock.recorder = &MockInfluxDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInfluxDB) EXPECT() *MockInfluxDBMockRecorder {
	return m.recorder
}

// InitDB mocks base method
func (m *MockInfluxDB) InitDB() error {
	ret := m.ctrl.Call(m, "InitDB")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitDB indicates an expected call of InitDB
func (mr *MockInfluxDBMockRecorder) InitDB() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitDB", reflect.TypeOf((*MockInfluxDB)(nil).InitDB))
}

// InsertToInflux mocks base method
func (m *MockInfluxDB) InsertToInflux(MyDB, measurement, columnName string, value int, roundedTime time.Time) {
	m.ctrl.Call(m, "InsertToInflux", MyDB, measurement, columnName, value, roundedTime)
}

// InsertToInflux indicates an expected call of InsertToInflux
func (mr *MockInfluxDBMockRecorder) InsertToInflux(MyDB, measurement, columnName, value, roundedTime interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertToInflux", reflect.TypeOf((*MockInfluxDB)(nil).InsertToInflux), MyDB, measurement, columnName, value, roundedTime)
}

// GetFieldValueIfExist mocks base method
func (m *MockInfluxDB) GetFieldValueIfExist(MyDB, columnName, measurement string, roundedTime time.Time) int {
	ret := m.ctrl.Call(m, "GetFieldValueIfExist", MyDB, columnName, measurement, roundedTime)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetFieldValueIfExist indicates an expected call of GetFieldValueIfExist
func (mr *MockInfluxDBMockRecorder) GetFieldValueIfExist(MyDB, columnName, measurement, roundedTime interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldValueIfExist", reflect.TypeOf((*MockInfluxDB)(nil).GetFieldValueIfExist), MyDB, columnName, measurement, roundedTime)
}
